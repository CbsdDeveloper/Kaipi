  private function readP12ConvertPem($publicPath, $passphrase) {
    if (!is_file($publicPath)) return;
	  $keys = file_get_contents($publicPath); //var_dump($keys);
	  $explode = explode("Bag Attributes",$keys);
	  $private_keys=""; $public_keys="";
	  foreach($explode as $aux){
		  if(!empty(trim($aux))){
			  $aux="Bag Attributes".$aux;
			  if (strpos($aux, '-----BEGIN CERTIFICATE-----') !== false){
				  $public_keys.=$aux;
			  }else{
				  $private_keys.=$aux;
			  }
		  }
	  }
	  $matches=null; $key=false;
	  preg_match_all('/(Bag Attributes.*.*-----END CERTIFICATE-----)/Us', $public_keys, $matches);
	  if(count($matches[0])>0)
        foreach($matches[0] as $match){
            $keyAux=openssl_x509_parse($match);
            if(/*$keyAux['extensions']['1.3.6.1.4.1.37947.3.11'] &&*/ $keyAux['purposes'][4][0] && $keyAux['validTo_time_t']>=time() && $keyAux['validFrom_time_t']<=time()){
                $key=$match;
                $this->from=date('Y-m-d H:i:s', $keyAux['validFrom_time_t']);
                $this->to=date('Y-m-d H:i:s', $keyAux['validTo_time_t']);
                break;
            }else if($keyAux['purposes'][4][0]){
                $this->to=date('Y-m-d H:i:s', $keyAux['validTo_time_t']);
            }
        }
    if(!$key) return; //var_dump($key);	  
	$this->publicKey =	openssl_x509_read($key);
	$publicData = (openssl_pkey_get_details(openssl_pkey_get_public($key)));	
	$modulus=base64_encode($publicData['rsa']['n']); //$xml->getElementsByTagName('Modulus')->item(0)->nodeValue; //var_dump($modulus);
    
	  $matches=null; $pkey=false;
	  preg_match_all('/(Bag Attributes.*-----END ENCRYPTED PRIVATE KEY-----)/Us', $private_keys, $matches);
	  if(count($matches[0])>0)
		  foreach($matches[0] as $match){
             $pkeyAux=openssl_pkey_get_private($match,$passphrase); if(!$pkeyAux) continue;
			 $privateData= openssl_pkey_get_details($pkeyAux);

			 if(base64_encode($privateData['rsa']['n']) == $modulus){ $pkey=$pkeyAux; break; }
		  }
	  $this->privateKey = $pkey;
  }